package com.example.gps_analytic_googlemap;

import android.content.Context;
import android.location.Location;
import android.location.LocationManager;
import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import com.example.googleanalyticshelloworld.R;
import com.google.android.gms.analytics.HitBuilders;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;

import java.util.List;

/**
 * The main application activity. The automatic activity tracking is enabled in {@link
 * MyApp#onCreate()}. Most of the class is boilerplate template generated by Android Studio. The
 * Google Analytics code is added to onOptionsItemSelected handler to log an event when settings are
 * selected from the menu.
 */
public class MainActivity extends ActionBarActivity {
    private GoogleMap map;
    private LatLng ltlng;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);


        // GET GPS DATA
        double[] gp=getGPS();
        System.out.println("GPS" + gp[0]+"="+gp[1]);
        if(String.valueOf(gp[0]).equals("0.0")|| String.valueOf(gp[1]).equals("0.0"))
        {
            Toast.makeText(MainActivity.this, "GPS is off", Toast.LENGTH_LONG).show();
        }else {
            Toast.makeText(MainActivity.this, "GPS=" + "GPS" + gp[0] + "=" + gp[1], Toast.LENGTH_LONG).show();
        }


        // Send info  to google analytics ( Key is defined in MyApp.java)
        // event with category="Main Page Event", action="open", and label="Main Page"
        MyApp.tracker().send(new HitBuilders.EventBuilder("Main Page Event", "open")
                .setLabel("Main Page")
                .build());


        // Sign your API with debug keystore
        //command:  keytool -list -v -keystore <path_to_your_keystore> will give you SHA1.


        //set up google map

        InitialiseMap();
        Button buttonreload1=(Button)findViewById(R.id.buttonreload);
        buttonreload1.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                map.clear();
                ltlng=new LatLng(1.3322, 103.3);
                map.addMarker(new MarkerOptions()
                        .position(ltlng)
                        .title("Hello world:"));
            }
        });


    }
    private void InitialiseMap() {
        // TODO Auto-generated method stub
        if (map == null) {
            map = ((SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map_frag))
                    .getMap();

            map.setMyLocationEnabled(true);
            for (int i = 1; i < 10; i++) {
                ltlng=new LatLng(i+.33, i+1);

                map.addMarker(new MarkerOptions()
                        .position(ltlng)
                        .title("Hello world:"+i));
            }
        }
    }
    @Override
    protected void onResume() {
        super.onResume();


    }


    private double[] getGPS(){
        LocationManager lm = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
        List<String> providers = lm.getProviders(true);

    /* Loop over the array backwards, and if you get an accurate location, then break out the loop*/
        Location l = null;

        for (int i=providers.size()-1; i>=0; i--) {
            System.out.println("GPS" + providers.get(i));
            l = lm.getLastKnownLocation(providers.get(i));
            if (l != null) break;
        }

        double[] gps = new double[2];
        if (l != null) {
            gps[0] = l.getLatitude();
            gps[1] = l.getLongitude();
        }
        return gps;
    }
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            // Log setting open event with category="ui", action="open", and label="settings"
            MyApp.tracker().send(new HitBuilders.EventBuilder("ui", "open")
                    .setLabel("settings")
                    .build());
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
}
